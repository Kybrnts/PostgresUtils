#!/bin/sh
#: Title       : Lastpostgreserrs
#: Date        : 2017-08-24
#: Authors     : Written by : "Kybernetes" <correodelkybernetes@gmail.com>
#:             : Reviewed by:  shd128 (https://github.com/shd128)
#: Version     : 1.0.0
#: Description : Dash script file
#:             : Retrieves last postgreSQL errors since last execution
#: Options     : N/A
##
## -- Required for execution -------------------------------------------------------------------------------------------
type awk >/dev/null || exit 1
type ps >/dev/null || exit 1
type fuser >/dev/null || exit 1
type file >/dev/null || exit 1
type sudo >/dev/null || exit 1
##
## -- Globals -----------------------------------------------------------------------------------------------------------
##
## Declare the following useful symbols:
readonly _NULL                                  ## The unset value (null ptr), not to be confused w/the null string;
IFS=                                            ## Clear the IFS in case they a messy one has been exported;
readonly _SPC=" "                               ## Space (readonly uses a word for assignment's LHS);
readonly _TAB="$(printf "\t")"                  ## Tab;
_EOL="$(printf "\n:")"; readonly _EOL=${_EOL%?} ## En of line (newline);
IFS=$_SPC$_TAB$_EOL                             ## Now reset the IFS as expected
_RPLY=                                          ## The global reply from read command
##
## Configuration parameters:
PGUSER=postgres                                          ## PostgreSQL's system user
PGVERS=9.5                                               ## PostgreSQL version (try to be version agnostic)
PGDATA=/var/lib/pgsql/$PGVERS/data                       ## PostgreSQL Databases container
PGLOGS="$PGDATA/pg_log"                                  ## PostgreSQL log files container
PGPIDF=/var/run/postgresql/pgsql.pid                     ## PostgreSQL external pidfile
_CNF_MATCHES="FATAL|ERROR"                               ## Error patterns to match in log files
_CNF_LSTLOGF="/home/monitor/lstpglog.log"                ## Last error count from log file
_CNF_LSTCNTF="/home/monitor/lstpgcount.log"              ## Last used log file
_CNF_NOWFRMT="%F"                                        ## Date's output format
_CNF_LOGFPFX=""                                          ## Fixed PostgreSQL logfile prefix
_CNF_LOGFSFX=".log"                                      ## Fixed PostgreSQL logfile suffix
##
## -- Auxiliary functions ----------------------------------------------------------------------------------------------
sbstr() { #@ DESCRIPTION: Tests if $1 is a substring fo $2
          #@ USAGE: sbstr '[ STRNG1 ]' '[ STRNG2 ]'
    case $2 in
        *$1*) return 0 ;;
    esac
    return 1
}
stdmsg() { #@ DESCRIPTION: Print messages to STDOUT
           #@ USAGE: stdmsg [ MSG ... ]
    [ "${1+X}" = X ] && printf "%s\n" "$@"
}
errmsg() { #@ DESCRIPTION: Print messages to STDERR prefixed by an error stamp
           #@ USAGE: stderr [ MSG ... ]
    stdmsg ${1+"Error! $@"} >&2
}
_FFLNE=
getFFLne() { #@ DESCRIPTION: Reads 1st line of file specified by $2 path into $1 name.
             #@ USAGE: getFFLne NAME PATH
    read _FFLNE <"$2"
    case $? in
        1) [ "X$_FFLNE" = "X" ] && return 1 ;; ## EOF reached before any EOL. If nothing was read, finish w/errors
        [!0]*) return 2 ;;                     ## Something went wrong
    esac
    eval "$1=\"\$_FFLNE\"" ## Assign global value to referenced name  /!\ - $1 must be a valid shell name /!\
}
setFFLne() { #@ DESCRIPTION: Updates $1 file's first line with $2 string
             #@ USAGE: setFFLne PATH '[ STRING ]'
    stdmsg ${2+"$2"} >"$1" || return 1
}
##
## -- Core functions ---------------------------------------------------------------------------------------------------
_UPIDCHS=   ## Number of elements of below string list 
_UPIDCHLST= ## User's process child list
getUPIDChLst() { #@ DESCRIPTION: Gathers all $3-ID process child ids belonging to user whose name is $4 and that match
                 #@              $5 pattern in their command line, in a colon separated list. Then writes that list and
                 #@              the number of gathered pids to $1 and $2 names respectively.
                 #@ USAGE: getUsrPrcsPIDs NAME NAME PPID USER [ PATTERN ]
     ## Get Parent pid, [r]user, pid and args of all currently running processes, then filter them out w/embedded awk
    _UPIDCHLST=$(ps -eo "ppid ruser user pid args" | awk \
'BEGIN{ c=0; pidlist="" }                                # Initialize a matches counter and a process id list
$1 == "'$3'" && ($2 == "'$4'" || $3 == "'$4'"){ # Filter # Filter out by parent PID and user
    $1=$2=$3=""                                          # Remove already matched fields
    if($0 ~ /'"${5:-.*}"'/) {                            # Match by pattern against args field
        if(!c) pidlist=$4;                               # Initialize begin pidlist
        else pidlist=pidlist":"$4;                       # Append to pidlist
        c++                                              # Increase matches counter
    }
}
END{ print c"::"pidlist }                                # Finally print list prefixed by its number of elements
') || return 2                           ## Return 2 if something nasty happened to pipeline
    _UPIDCHS=${_UPIDCHLST%%::*}          ## Extract the number of elements from list prefix
    _UPIDCHLST=${_UPIDCHLST#$_UPIDCHS::} ## Remove list's prefix
    eval "$1=\"\$_UPIDCHS\""             ## Write global child's num to $1 name /!\ - $1 must be a valid names /!\
    eval "$2=\"\$_UPIDCHLST\""           ## Write 
    [ "$_UPIDCHS" -gt 0 ] || return 1    ## Return 1 when no matching process is found
}
_BYPIDDIRTXFS=   ## Number of elements of below string list
_BYPIDDIRTXFLST= ## List of EOL text files inside dir opened by PID
_getByPIDDirTxFLst() { #@ DESCRIPTION: Gathers all txt files used by $1 process ID contained right below $2 dir in a \n
                       #@ separated list, storing it in _BYPIDDIRTXFLST global, and its # of elements in  _BYPIDDIRTXFS.
                       #@ USAGE: getByPIDDirFLst PID PATH    
    ## Local variables (If local is used, it should appear as the first statement of a function)
    local prply fst tpe ferr pids         ## Previous reply, a flag, file type, another flag, PIDs of procs using file
    _BYPIDDIRTXFS=0 _BYPIDDIRTXFLST=      ## Initialize global list and elements counter
    fst=true prply= tpe= ferr=false pids= ## Int fist line as true, and warnings flag false. Clear local strings
    # Read all replies from below "here string" always keeping last reply in memory
    while IFS= read -r _RPLY; do          ## For each reply, store current reply and..
        if $fst; then                     ## If this is the first reply..
            fst=false                     ## * Following replies won't be, so switch flag to false 
        elif [ -f "$prply" ]; then        ## Else process reply (start on 2nd). If next reply not regular file, skip it
            if ! tpe=$(file -i "$prply" 2>/dev/null); then ## Get regular file's type into var, if not possible
                ferr=true                                  ## * Set file errors flag to true, and skip reply
            elif sbstr "text/plain" "$tpe"; then           ## If regular file is not a nonempty text file, skip reply
                if ! pids=$(fuser -f "$prply" 2>&1); then  ## Get pids of procs using file, if not possible..
                    [ "X$pids" = X ] || ferr=true          ## * If no error messages, assume fuser error else skip reply
                elif sbstr $1 "${pids#*: }"; then          ## If found pids do not contain argument pid, skip reply
                    _BYPIDDIRTXFLST=${_BYPIDDIRTXFLST:+"$_BYPIDDIRTXFLST$_EOL"}"$prply" ## Append reply to global list
                    _BYPIDDIRTXFS=$((_BYPIDDIRTXFS + 1))                                ## Increase list elements
                fi
            fi
        fi
        prply=$_RPLY ## Update previous reply w/current reply
    done <<EOF
$(printf "%s\n" "$2"/* 2>/dev/null; printf "%d" $?)
EOF
    ## Above command assures to have at least one reply containing an exit status.
    ## In addition, the here document syntax forces input to end en an empty line.
    ## As consequence, last previous replay, holds the exit status of printf.
    [ "$prply" = 0 ]  || return 3        ## If previous reply sint 0, then printf failed :-O !!! return 3
    $ferr && return 2                    ## If there wre errors during output processing return 2
    [ $_BYPIDDIRTXFS -gt 0 ] || return 1 ## Return 1 when no files found for $1 pid
}
getByPIDDirTxFLst() { #@ DESCRIPTION:
                      #@ USAGE:
    _getByPIDDirTxFLst ${3+"$3"} ${4+"$4"} || return $?
    # Assign globals value to referenced names  /!\ - $1 and $2 must be a valid shell names /!\
    eval "$1=\"\$_BYPIDDIRTXFS\""
    eval "$2=\"\$_BYPIDDIRTXFLST\""
}
_MLNUM=
getMLnum() { #@ DESCRIPTION: Counts all matching lines from $2 file given the $3 pattern, storing number in $1 name.
             #@ USAGE: getMLnum NAME PATH [ PATTERN ]
    ## Count each matching line using awk w/inner variable, if awk fails let the calling environment know
    _MLNUM=$(awk 'BEGIN{ c=0 } /'"${3:-.*}"'/{ c++ } END{ print c }' "$2") || return 2
    ## Assign global's value to referenced name  /!\ - $1 must be a valid shell name /!\
    eval "$1=\"\$_MLNUM\""
    ## Also report to the calling environment when no matching lines are found 
    [ "$_MLNUM" = 0 ] || return 1
}
_MLNAFT=
dspMLnAft() { #@ DESCRIPTION: Displays $3 pattern-matching lines from $2 file, after (ignoring) first $4 matching ones.
              #@              Total number of displayed lines is saved into $1 name.
              #@ USAGE: dspLMLnsIf NAME PATH [ PATTERN [ NUM ] ]
    # Proces $1 file, splitting all ines to STDOUT or ERR, saving awk's script STDOUT lines to global
    { _MLNAFT=$(while read -r _RPLY; do                ## Send each line to STDOUT or ERR according to prefix
                    case $_RPLY in                     ## Remove prefix and send lines to STD..
                        S*) stdmsg "${_RPLY#?}" ;;     ## * OUT if S-prfx so matches count and awk's status go to global
                        E*) stdmsg "${_RPLY#?}" >&2 ;; ## * ERR if E-prefixed so matching lines can be displayed
                    esac
                done <<EOF
$(awk \
'BEGIN{ c=0 }                     ## Initialize line counter
/'"${3:-.*}"'/{                   ## If line matches pattern..
    c++;                          ## * Increase counter
    if(c > '${4:-0}') print "E"$0 ## * If counter above ignored num, print line w/"E" prefix
}
END{ print "S"c - '${4:-0}' }     # Finally print total non-ignored lines number w/"S" prefix
' "$2"; printf "S%d" $?)
EOF
             ); } >&1                                  ## Redirect STDERR messages to STDOUT where they belong
    # Now validate results according to global's content
    if ! sbstr "$_EOL" "$_MLNAFT"; then      ## If returned global string do not consist of two lines..
        eval "$1=0"                          ## * Assume awk failed regardless of its status, and no lines displayed
	return 3                             ## * Let the calling environment know about failure
    fi                                       ## From now onwards we have two lines in global
    eval "$1=\"\${_MLNAFT%%$_EOL*}\""        ## Assign first line's content (displayed lines number) to global
    [ "${_MLNAFT##*$_EOL}" = 0 ] || return 2 ## If second lines's content (awk status) is not zero return 2
    [ "${_MLNAFT%%$_EOL*}" = 0 ] && return 1 ## If awk status is zero but no lines matched, return 1
}
excAs() { 
    exec sudo -u "${1:-$USER}" "${2:-:}"
}
##
## -- MAIN -------------------------------------------------------------------------------------------------------------
main() {
    set --
    ##
    ## Make sure that current user is postgres
    if [ "$USER" != "$PGUSER" ]; then ## Is current user postgres?
        execAs "$PGUSER" "$0"         ## Then check 
    else
        
    fi
    ##
    ## Read last log filename used by Logging Collector from file
    ##
    ## Read last number of matching lines found during previous run from file
    ##
    ## Count current number of matches found in previously used log file
    ##
    ## Compare the current number of errors "C" in previous log file w/the previous number "P"
    ##
    ## Update last number of matches found in previous run in file adding "C - P" to its number
    ##
    ## Find PostgreSQL's Logging collector's PID
    ##
    ## Get current log filename used by Logging Collector
    ##
    ## Compare currently used log file w/read one
    ##
    ## Now Collector's using new log file since previous run, so create/update last file log file
    ##
    ## Count all matching lines found in new log file, finishing w/errors if that fails
    ##
    ## Display previously counted matching lines from new log file
    ##
    ## Update last number of matches found in previous run in file w/counted number
 }
##
## -- RUN! -------------------------------------------------------------------------------------------------------------
main "$@"
